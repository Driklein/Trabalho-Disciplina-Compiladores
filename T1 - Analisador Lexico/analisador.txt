
/* DECLARACOES */

%option noyywrap

%{
    #include <stdio.h>
    #include "tokens.h"
%}

DIGITO [0-9]
LETRA [a-zA-Z]
ESPACO [ ]
VARIAVEL [a-zA-Z][a-zA-Z0-9]*
ABRECHAVES [{]
FECHACHAVES [}]
ABREPARENTESES [(]
FECHAPARENTESES [)]
ABRECOMENTARIO [/*]
FECHACOMENTARIO [*/]


%%

/* REGRAS DE TRADUCAO */

int    { return(INT); }
double { return(DOUBLE);}
"*"    { return('*');}
"{"    { return('{');}
"}"    { return('}');}
"<"    { return(MENOR);}
">"    { return(MAIOR);}
"="    { return(IGUAL);}
if     { return(IF);}
[ \n]+ { printf("BRANCO\n"); }


/* TRATAMENTO DOS ERROS LEXICAIS */

. { printf("Erro lexico: caractere desconhecido '%c' (%d).\n",
        yytext[0], yytext[0]); exit(70); }


%%
 /* PROCEDIMENTOS AUXILIARES  */

 /* Para redefinir a entrada padrao do LEX. 
  * Redefinir a variavel 'yyin' para ler de um arquivo. Por exemplo:
     yyin = fopen("Meu_programa.c", "r");
  * ira mandar ler o programa a ser compilado pelo analisador lexical
  * em 'Meu_programa.c'.
  * O default eh ler da entrada standard (o teclado).
  */
/*

extern FILE *yyin;
int main(int argc, char* argv[]) {
   int token;
   if (argc != 2) {
     printf("uso: %s <input_file>. Try again!\n", argv[0]);
     exit(50);
   }
   yyin = fopen(argv[1], "r");
   if (!yyin) {
     printf("Uso: %s <input_file>. Could not find %s. Try again!\n", 
         argv[0], argv[1]);
     exit(55);
   }
*/
  /* agora a entrada padrao eh o arquivo especificado como 1o argumento ao
   * executavel (argv[1]).
   * Soh chama o analisador lexical default fornecido pelo output do Flex:
   */
//  while (token=yylex()) { 
     /* neste laco, obtem-se "palavra por palavra" os tokens reconhecidos
      * pelo scanner fornecido pelo Lex. Poderia ser feita a analise
      * sintatica... Sera feito depois!
      */
/*     printf("Meu analisador lexical reconheceu o token %d\n", token);
  }
  return(0);
}
*/